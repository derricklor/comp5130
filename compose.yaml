# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client:
    build: ./client
    container_name: client_app
    command: npm run dev
    #restart: always
    ports:
      - 5173:5173
    volumes:
      - ./client:/usr/src/app
    networks:
      - frontend
    depends_on:
      - server

  server:
    build: ./server
    container_name: node_server
    command: npm run dev
    #restart: always
    ports:
      - 4000:4000
    networks:
      - frontend
      - backend
    
    volumes:
      - ./server:/usr/src/app
    depends_on:
      db:
        condition: service_healthy

# `depends_on` tells Docker Compose to start running the database before your application. 
# `condition: service_healthy` adds a health check to wait until the database is ready to accept connections before starting your application.
    
  db:
    image: mysql:8
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 'secretpassword' # or use password file and put in dockerignore list
      MYSQL_DATABASE: 'moviedb'
      #MYSQL_USER: 'user' # MYSQL_USER and MYSQL_PASSWORD are for configuring a regular user and cannot be used for the root user
      #MYSQL_PASSWORD: ''
    ports:
      - 3306:3306
    volumes:
      - ./mysql/moviedb4.sql:/docker-entrypoint-initdb.d/moviedb4.sql # link db init from file
      - mysql_data:/var/lib/mysql # default location defined by mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  mysql_data: # persists mysql data between container restarts.

networks:
  frontend: # default driver is bridge
    driver: bridge
  backend: 
    driver: bridge