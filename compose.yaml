# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client:
    build:
      context: client
      target: client-develop
    environment:
      NODE_ENV: development
    command: npm run start
    ports:
      - 3000:3000
    develop:
      watch:
      - path: ./client/src
        action: sync
        target: /usr/local/app/src
      - path: ./client/package.json
        action: rebuild
    networks:
      - frontend
    depends_on:
      - server

  server:
    build:
      context: server
      target: server-develop
    environment:
      NODE_ENV: development
    command: npm run start
    ports:
      - 4000:4000
    networks:
      - frontend
      - backend
    develop:
      watch:
      - path: ./server/server.js
        action: sync
        target: /usr/local/app/src #
      - path: ./server/package.json
        action: rebuild
    depends_on:
      - mysql

# `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    
  mysql:
    image: mysql
    restart: always #unless-stopped
    command: --default-authentication-plugin=mysql_native_password
#     user: postgres
#     secrets:
#       - db-password
    networks:
      - backend
    volumes:
      - db-data:/var/lib/mysql # default location defined by mysql
    environment:
      MYSQL_DATABASE: moviedb
      MYSQL_ROOT_PASSWORD: 'secretpassword' # or use password file and put in dockerignore list
      # MYSQL_USER: 'user' # by default creates root user and root pass
      # MYSQL_PASS: ''
    # healthcheck:
    #   test: [ "CMD", "pg_isready" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  db-data:
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  # The presence of these objects is sufficient to define them
  frontend: 
  backend: 