# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
    networks:
      - back
    develop:
      watch:
        - action: sync
          path: .
          target: /usr/src/app
    depends_on:
          mysql:
            condition: service_healthy

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    
  mysql:
    image: mysql
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
#     user: postgres
#     secrets:
#       - db-password
    networks:
      - back
    volumes:
      - db-data:/var/lib/sql/data
    environment:
      MYSQL_ROOT_PASSWORD: '' # TODO: Change this
      MYSQL_USER: 'root'
      MYSQL_PASS: ''
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  # The presence of these objects is sufficient to define them
  front: {}
  back: {}